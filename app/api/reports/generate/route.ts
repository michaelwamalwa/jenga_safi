import { NextResponse } from "next/server";
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

export async function POST(req: Request) {
  try {
    const body = await req.json();

    // Create PDF
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([600, 800]);
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

    page.drawText("Sustainability Report", {
      x: 50,
      y: 750,
      size: 20,
      font,
      color: rgb(0, 0.53, 0.71),
    });

    page.drawText(`Site: ${body.site || "N/A"}`, { x: 50, y: 700, size: 14, font });
    if (body.carbonData) {
      page.drawText(`Carbon Emissions: ${body.carbonData.emissions} kg CO2`, {
        x: 50,
        y: 670,
        size: 14,
        font,
      });
    }

    page.drawText(`Generated By: ${body.generatedBy || "Unknown"}`, { x: 50, y: 640, size: 12, font });
    page.drawText(`Generated At: ${body.generatedAt}`, { x: 50, y: 620, size: 12, font });

    // Save PDF and convert to Buffer
    const pdfBytes = await pdfDoc.save();
    const pdfBuffer = Buffer.from(pdfBytes); // <-- convert Uint8Array to Buffer

    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": "attachment; filename=report.pdf",
      },
    });
  } catch (err: any) {
    console.error("Error generating report:", err);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}
